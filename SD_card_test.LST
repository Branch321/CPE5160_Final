C51 COMPILER V6.02  SD_CARD_TEST                                                           12/07/2019 23:59:09 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE SD_CARD_TEST
OBJECT MODULE PLACED IN .\SD_card_test.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\SD_card_test.c DEBUG OBJECTEXTEND

stmt level    source

   1          /* Names: Tyler Andrews, Brennan Campbell, and Tyler Tetens
   2           * Title: Experiment #4 - Fat File System
   3           */
   4          
   5          #include "AT89C51RC2.h"
   6          #include "stdio.h"
   7          #include "main.h"
   8          #include "PORT.H"
   9          #include "UART.h"
  10          #include "print_bytes.h"
  11          #include "SPI.h"
  12          #include "SDcard.h"
  13          #include "Long_Serial_In.h"
  14          #include "LCD_routines.h"
  15          #include "Timer0_hardware_delay_1ms.h"
  16          #include "Outputs.h"
  17          #include "LED_Control.h"
  18          #include "Directory_Functions_struct.h"
  19          #include "Read_Sector.h"
  20          #include <stdio.h>
  21          #include "sEOS.h"
  22          
  23          
  24          uint8_t code SD_start[]="SD Card Init...";
  25          uint8_t code SDSC[]="Std. Capacity";
  26          uint8_t code SDHC[]="High Capacity";
  27          
  28          xdata uint8_t buf1[512];
  29          xdata uint8_t buf2[512];
  30          
  31          main()
  32          {
  33   1         uint32_t block_num;
  34   1         uint16_t i;
  35   1         uint8_t error_flag;
  36   1         uint8_t SD_stat;
  37   1         uint32_t cluster_num;
  38   1         uint32_t current_directory_sector;
  39   1         uint32_t num_entries;
  40   1         FS_values_t * Mounted_Drive_values = Export_Drive_values();
  41   1         //printf("Is this working?!?!?!");
  42   1         AUXR=0x0c;   // make all of XRAM available, ALE always on
  43   1         if(OSC_PER_INST==6)  // sets the x2 bit according to the OSC_PER_INST value
  44   1         {
  45   2             CKCON0=0x01;  // set X2 clock mode
  46   2         }
  47   1         else if(OSC_PER_INST==12)
  48   1         {
  49   2             CKCON0=0x00;  // set standard clock mode
  50   2         }
  51   1         
  52   1         P2_set_bit(0x0F);  // sets lower four bits of port 2 for switch inputs.
  53   1         LEDS_OFF(Amber_LED|Yellow_LED|Green_LED);
  54   1         LEDS_ON(Red_LED);
  55   1         i=0;
C51 COMPILER V6.02  SD_CARD_TEST                                                           12/07/2019 23:59:09 PAGE 2   

  56   1         while(i<=60000) i++;
  57   1         LEDS_OFF(Red_LED);
  58   1         uart_init(9600);
  59   1         LCD_Init();
  60   1         //sEOS_init(12);
  61   1         printf("SD Card Test Program\n\r\n\n");
  62   1         LCD_Print(line1,0,SD_start);   
  63   1         error_flag=SPI_Master_Init(400000UL);
  64   1         if(error_flag!=no_errors)
  65   1         {
  66   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  67   2      	  UART_Transmit('S');
  68   2            while(1);
  69   2         }
  70   1         LEDS_ON(Amber_LED);
  71   1         // SD Card Initialization
  72   1         error_flag=SD_card_init();
  73   1         if(error_flag!=no_errors)
  74   1         {
  75   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  76   2      	  UART_Transmit('C');
  77   2            while(1);
  78   2         }
  79   1         LEDS_OFF(Amber_LED);
  80   1         error_flag=SPI_Master_Init(400000UL);
  81   1         if(error_flag!=no_errors)
  82   1         {
  83   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  84   2      	  UART_Transmit('P');
  85   2            while(1);
  86   2         }
  87   1         for(i=0;i<512;i++)
  88   1         {
  89   2            buf1[i]=0xff;  // erase valout for debug
  90   2      //      buf2[i]=0xff;
  91   2         }
  92   1         SD_stat=Return_SD_Card_Type();
  93   1         if(SD_stat==Standard_Capacity)
  94   1         {
  95   2            LCD_Print(line2,0,SDSC);
  96   2         }
  97   1         else if(SD_stat==High_Capacity)
  98   1         {
  99   2            LCD_Print(line2,0,SDHC);
 100   2         }
 101   1      // Main Loop
 102   1         error_flag = Mount_Drive(buf1);
 103   1         current_directory_sector = Mounted_Drive_values->FirstRootDirSec;
 104   1         while(1)
 105   1         {
 106   2            num_entries = Print_Directory(current_directory_sector, buf1);
 107   2            printf("Input Entry #: ");
 108   2            block_num=long_serial_input(); //block_num is entry number for Read_Dir_Entry()
 109   2            while ((block_num <= 0) || (block_num > num_entries))
 110   2            {
 111   3               printf("Invalid selection. Please select a valid entry.");
 112   3               block_num = long_serial_input();
 113   3            }
 114   2      
 115   2      	  LEDS_ON(Green_LED);
 116   2      	  cluster_num = Read_Dir_Entry(current_directory_sector, block_num, buf1);
 117   2      	  if((cluster_num &directory_bit)!=0) // directory mask
C51 COMPILER V6.02  SD_CARD_TEST                                                           12/07/2019 23:59:09 PAGE 3   

 118   2      	  {
 119   3      	  	   printf("Entry is a directory...Opening now...\r\n");
 120   3      	      cluster_num &= 0x0FFFFFFF;
 121   3               current_directory_sector = First_Sector(cluster_num);
 122   3      	  }
 123   2      	  else // if entry is a file
 124   2      	  {
 125   3      	  	   printf("Entry is a file...Opening now...\r\n");
 126   3      	  	   cluster_num &= 0x0FFFFFFF;
 127   3      	      Open_File(cluster_num, buf2);
 128   3      	  }
 129   2         }
 130   1      } 
 131          
 132          
 133          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    548    ----
   CONSTANT SIZE    =    208    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
