C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             12/08/2019 19:04:40 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE DIRECTORY_FUNCTIONS_STRUCT
OBJECT MODULE PLACED IN .\Directory_Functions_struct.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\Directory_Functions_struct.c DEBUG OBJECTEXTEND

stmt level    source

   1          /* Names: Tyler Andrews, Brennan Campbell, and Tyler Tetens
   2           * Title: Experiment #4 - Fat File System
   3           */
   4          #include "AT89C51RC2.h"
   5          #include <stdio.h>
   6          #include "main.h"
   7          #include "PORT.H"
   8          #include "UART.h"
   9          #include "SPI.h"
  10          #include "SDCard.h"
  11          #include "File_System.h"
  12          #include "print_bytes.h"
  13          #include "Directory_Functions_struct.h"
  14          #include "Read_Sector.h"
  15          #include <string.h>
  16          #include "print_bytes.h"
  17          #include "Long_Serial_In.h"
  18          
  19          FS_values_t idata Drive_values;
  20          
  21          /***********************************************************************
  22          DESC: Returns a pointer to the global structure Drive_values to export to other files
  23          INPUT: void
  24          RETURNS: Pointer to the structure Drive_values
  25          CAUTION: 
  26          ************************************************************************/
  27          
  28          FS_values_t * Export_Drive_values(void)
  29          {
  30   1         return &Drive_values;
  31   1      }
  32          
  33          uint8_t read8(uint16_t offset, uint8_t * array_name)
  34          {
  35   1      	uint8_t return_value;
  36   1      	return_value = array_name[offset];
  37   1      	return return_value;
  38   1      
  39   1      }
  40          
  41          uint16_t read16(uint16_t offset, uint8_t * array_name)
  42          {
  43   1      	uint32_t return_value;
  44   1      	uint8_t temp, index;
  45   1      	return_value=0;
  46   1      
  47   1      	// little endian to big endian
  48   1      	// loop for 2 bytes
  49   1      	for(index=0;index<2;index++)
  50   1      	{
  51   2      		temp=*(array_name+offset+(1-index));
  52   2      		return_value=return_value<<8;
  53   2      		return_value|=temp;
  54   2      	}
  55   1      	return return_value;
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             12/08/2019 19:04:40 PAGE 2   

  56   1      }
  57          
  58          uint32_t read32(uint16_t offset, uint8_t * array_name)
  59          {
  60   1      	uint32_t return_value;
  61   1      	uint8_t temp, index;
  62   1      	return_value=0;
  63   1      
  64   1      	// little endian to big endian
  65   1      	// loop for 4 bytes
  66   1      	for(index=0;index<4;index++)
  67   1      	{
  68   2      		temp=*(array_name+offset+(3-index));
  69   2      		return_value=return_value<<8;
  70   2      		return_value|=temp;
  71   2      	}
  72   1      	return return_value;
  73   1      }
  74          
  75          /***********************************************************************
  76          DESC: Prints all short file name entries for a given directory
  77          INPUT: Starting Sector of the directory and the pointer to a
  78          block of memory in xdata that can be used to read blocks from the SD card
  79          RETURNS: uint16_t number of entries found in the directory
  80          CAUTION: Supports FAT16, SD_shift must be set before using this function
  81          ************************************************************************/
  82          
  83          uint16_t  Print_Directory(uint32_t Sector_num, uint8_t xdata * array_in)
  84          { 
  85   1         uint32_t Sector, max_sectors;
  86   1         uint16_t i, entries;
  87   1         uint8_t temp8, j, attr, out_val, error_flag;
  88   1         uint8_t * values;
  89   1      
  90   1      
  91   1         values=array_in;
  92   1         entries=0;
  93   1         i=0;
  94   1         if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
  95   1         { 
  96   2            max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
  97   2         }
  98   1         else
  99   1         {
 100   2            max_sectors=Drive_values.SecPerClus;
 101   2         }
 102   1         Sector=Sector_num;
 103   1         error_flag=Read_Sector(Sector, Drive_values.BytesPerSec, values);
 104   1         if(error_flag==no_errors)
 105   1         {
 106   2           do
 107   2           {
 108   3              temp8=read8(0+i,values);  // read first byte to see if empty
 109   3              if((temp8!=0xE5)&&(temp8!=0x00))
 110   3      	    {  
 111   4      	       attr=read8(0x0b+i,values);
 112   4      		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
 113   4      		   {
 114   5      		      entries++;
 115   5      			  printf("%5d. ",entries);  // print entry number with a fixed width specifier
 116   5      		      for(j=0;j<8;j++)
 117   5      			  {
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             12/08/2019 19:04:40 PAGE 3   

 118   6      			     out_val=read8(i+j,values);   // print the 8 byte name
 119   6      			     putchar(out_val);
 120   6      			  }
 121   5                    if((attr&0x10)==0x10)  // indicates directory
 122   5      			  {
 123   6      			     for(j=8;j<11;j++)
 124   6      			     {
 125   7      			        out_val=read8(i+j,values);
 126   7      			        putchar(out_val);
 127   7      			     }
 128   6      			     printf("[DIR]\n");
 129   6      			  }
 130   5      			  else       // print a period and the three byte extension for a file
 131   5      			  {
 132   6      			     putchar(0x2E);       
 133   6      			     for(j=8;j<11;j++)
 134   6      			     {
 135   7      			        out_val=read8(i+j,values);
 136   7      			        putchar(out_val);
 137   7      			     }
 138   6      			     putchar(0x0d);
 139   6                       putchar(0x0a);
 140   6      			  }
 141   5      		    }
 142   4      		}
 143   3      		    i=i+32;  // next entry
 144   3      		    if(i>510)
 145   3      		    {
 146   4      			  Sector++;
 147   4                    if((Sector-Sector_num)<max_sectors)
 148   4      			  {
 149   5                       error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 150   5      			     if(error_flag!=no_errors)
 151   5      			     {
 152   6      			        entries=0;   // no entries found indicates disk read error
 153   6      				    temp8=0;     // forces a function exit
 154   6      			     }
 155   5                       i=0;
 156   5      			  }
 157   4      			  else
 158   4      			  {
 159   5      			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
 160   5      			     temp8=0;                       // forces a function exit
 161   5      			  }
 162   4      		    }
 163   3               
 164   3      	  }while(temp8!=0);
 165   2      	}
 166   1      	else
 167   1      	{
 168   2      		printf("Error has occured");
 169   2      	   entries=0;    // no entries found indicates disk read error
 170   2      	}
 171   1         return entries;
 172   1       }
 173          
 174          
 175          /***********************************************************************
 176          DESC: Uses the same method as Print_Directory to locate short file names,
 177                but locates a specified entry and returns and cluster  
 178          INPUT: Starting Sector of the directory, an entry number and a pointer to a 
 179          block of memory in xdata that can be used to read blocks from the SD card
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             12/08/2019 19:04:40 PAGE 4   

 180          RETURNS: uint32_t with cluster in lower 28 bits.  Bit 28 set if this is 
 181                   a directory entry, clear for a file.  Bit 31 set for error.
 182          CAUTION: 
 183          ************************************************************************/
 184          
 185          uint32_t Read_Dir_Entry(uint32_t Sector_num, uint16_t Entry, uint8_t xdata * array_in)
 186          { 
 187   1         uint32_t Sector, max_sectors, return_clus;
 188   1         uint16_t i, entries;
 189   1         uint8_t temp8, attr, error_flag;
 190   1         uint8_t * values;
 191   1      
 192   1         values=array_in;
 193   1         entries=0;
 194   1         i=0;
 195   1         return_clus=0;
 196   1         if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
 197   1         { 
 198   2            max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
 199   2         }
 200   1         else
 201   1         {
 202   2            max_sectors=Drive_values.SecPerClus;
 203   2         }
 204   1         Sector=Sector_num;
 205   1         error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 206   1         if(error_flag==no_errors)
 207   1         {
 208   2           do
 209   2           {
 210   3              temp8=read8(0+i,values);  // read first byte to see if empty
 211   3              if((temp8!=0xE5)&&(temp8!=0x00))
 212   3      	    {  
 213   4      	       attr=read8(0x0b+i,values);
 214   4      		   if((attr&0x0E)==0)    // if hidden do not print
 215   4      		   {
 216   5      		      entries++;
 217   5                    if(entries==Entry)
 218   5                    {
 219   6      			    if(Drive_values.FATtype==FAT32)
 220   6                      {
 221   7                         return_clus=read8(21+i,values);
 222   7      				   return_clus=return_clus<<8;
 223   7                         return_clus|=read8(20+i,values);
 224   7                         return_clus=return_clus<<8;
 225   7                      }
 226   6                      return_clus|=read8(27+i,values);
 227   6      			    return_clus=return_clus<<8;
 228   6                      return_clus|=read8(26+i,values);
 229   6      			    attr=read8(0x0b+i,values);
 230   6      			    if(attr&0x10) return_clus|=directory_bit;
 231   6                      temp8=0;    // forces a function exit
 232   6                    }
 233   5                    
 234   5      		    }
 235   4      		}
 236   3      		    i=i+32;  // next entry
 237   3      		    if(i>510)
 238   3      		    {
 239   4      			  Sector++;
 240   4      			  if((Sector-Sector_num)<max_sectors)
 241   4      			  {
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             12/08/2019 19:04:40 PAGE 5   

 242   5                       error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 243   5      			     if(error_flag!=no_errors)
 244   5      			     {
 245   6      			         return_clus=no_entry_found;
 246   6                           temp8=0; 
 247   6      			     }
 248   5      			     i=0;
 249   5      			  }
 250   4      			  else
 251   4      			  {
 252   5      			     temp8=0;                       // forces a function exit
 253   5      			  }
 254   4      		    }
 255   3               
 256   3      	  }while(temp8!=0);
 257   2      	}
 258   1      	else
 259   1      	{
 260   2      	   return_clus=no_entry_found;
 261   2      	}
 262   1      	if(return_clus==0) return_clus=no_entry_found;
 263   1         return return_clus;
 264   1       }
 265          
 266          uint8_t Mount_Drive(uint8_t xdata * array_name)
 267          {
 268   1      	//uint8_t i;
 269   1      	uint8_t temp_8;
 270   1      	uint8_t error_flag;
 271   1      	// Below are constants from BPB used for calculations
 272   1      	// for the values in struct FS_values_t
 273   1      	uint16_t RsvdSectorCount;
 274   1      	uint8_t NumFATS;
 275   1      	uint16_t RootEntryCnt;
 276   1      	uint16_t TotalSectors16;
 277   1      	uint16_t FATsz16;
 278   1      	uint32_t TotalSectors32;
 279   1      	uint32_t FATsz32;
 280   1      	uint32_t FATSz;
 281   1      	//Ran out of space so now some vars are in xdata
 282   1      	uint32_t xdata TotSec;
 283   1      	uint32_t xdata DataSec;
 284   1      	uint32_t RootCluster;
 285   1      	uint32_t RelativeSectors;
 286   1      	uint32_t CountofClus;
 287   1      	
 288   1      	// Read in BPB or MBR
 289   1      	error_flag = Read_Sector(0, 512, array_name);
 290   1      	// Check for BPB or MBR
 291   1      	temp_8 = read8(0,array_name);
 292   1      	printf("Debug:: Offset 0 of Sector 0 is %x\r\n",temp_8);
 293   1      	if((temp_8!=0xEB)&&(temp_8!=0xE9))
 294   1      	{
 295   2      		printf("Found MBR...\r\n");
 296   2      		RelativeSectors = read32(0x01C6,array_name);
 297   2      		printf("Debug:: Offset 0 of Relative Sectors is %lx\r\n",RelativeSectors);
 298   2      		error_flag = Read_Sector(RelativeSectors ,512,array_name);
 299   2      		temp_8 = read8(0,array_name);
 300   2      		printf("Debug:: temp8 is %x\r\n",temp_8);
 301   2      		if((temp_8!=0xEB)&&(temp_8!=0xE9))
 302   2      		{
 303   3      			printf("Error BPB not Found!\r\n");
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             12/08/2019 19:04:40 PAGE 6   

 304   3      		}
 305   2      		else
 306   2      		{
 307   3      			printf("BPB Found!\r\n");
 308   3      		}
 309   2      	}
 310   1      	//print_memory(array_name, 512);
 311   1      	Drive_values.BytesPerSec = read16(0x0B,array_name);
 312   1      	//printf("BytesPerSec:: %x\r\n",Drive_values.BytesPerSec);
 313   1      	Drive_values.SecPerClus = read8(0x0D,array_name);
 314   1      	//printf("SecPerClus:: %bx\r\n",Drive_values.SecPerClus);
 315   1      	RsvdSectorCount = read16(0x0E,array_name);
 316   1      	//printf("RsvdSectorCount:: %x\r\n",RsvdSectorCount);
 317   1      	NumFATS = read8(0x10,array_name);
 318   1      	//printf("NumFATS:: %bx\r\n",NumFATS);
 319   1      	RootEntryCnt = read16(0x11,array_name);
 320   1      	//printf("RootEntryCnt:: %x\r\n",RootEntryCnt);
 321   1      	TotalSectors16 = read16(0x13,array_name);
 322   1      	//printf("TotalSectors16:: %x\r\n",TotalSectors16);
 323   1      	FATsz16 = read16(0x16,array_name);
 324   1      	//printf("FATsz16:: %x\r\n",FATsz16);
 325   1      	TotalSectors32 = read32(0x20,array_name);
 326   1      	//printf("TotalSectors32:: %lx\r\n",TotalSectors32);
 327   1      	FATsz32 = read32(0x24,array_name);
 328   1      	//printf("FATsz32:: %lx\r\n",FATsz32);
 329   1      	RootCluster = read32(0x2C, array_name);
 330   1      	//printf("RootCluster:: %lx\r\n",RootCluster);
 331   1      	Drive_values.StartofFAT = RsvdSectorCount + RelativeSectors;
 332   1      	//printf("StartofFAT:: %lx\r\n",Drive_values.StartofFAT);
 333   1      	Drive_values.RootDirSecs = ((RootEntryCnt*32) + (Drive_values.BytesPerSec-1))/Drive_values.BytesPerSec;
 334   1      	//printf("RootDirSecs:: %lx\r\n",Drive_values.RootDirSecs);
 335   1      	Drive_values.FirstDataSec = RsvdSectorCount + (NumFATS*FATsz32) + Drive_values.RootDirSecs + RelativeSect
             -ors;
 336   1      	//printf("FirstDataSec:: %lx\r\n",Drive_values.FirstDataSec);
 337   1      	Drive_values.FirstRootDirSec = ((RootCluster-2)*Drive_values.SecPerClus)+Drive_values.FirstDataSec;
 338   1      	//printf("FirstRootDirSec:: %lx\r\n",Drive_values.FirstRootDirSec);
 339   1      	Drive_values.FATshift = FAT32_shift;
 340   1      
 341   1      	//Checks FAT Size to use
 342   1      	if(FATsz16 != 0)
 343   1      	{
 344   2      		FATSz = FATsz16;
 345   2      	}
 346   1      	else
 347   1      	{
 348   2      		FATSz = FATsz32;
 349   2      	}
 350   1      	
 351   1      	//Checks which TotalSectors to use
 352   1      	if(TotalSectors16 != 0)
 353   1      	{
 354   2      		TotSec = TotalSectors16;
 355   2      	}
 356   1      	else
 357   1      	{
 358   2      		TotSec = TotalSectors32;
 359   2      	}
 360   1      	
 361   1      	//Calculates Number of Data Sectors for CountofClus
 362   1      	DataSec = (TotSec - (RsvdSectorCount + ((NumFATS * FATSz) + Drive_values.RootDirSecs)));
 363   1      	
 364   1      	//Calculates CountofClus to use for determining FATtype
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             12/08/2019 19:04:40 PAGE 7   

 365   1      	CountofClus = DataSec / Drive_values.SecPerClus;
 366   1      
 367   1      	//Determines FAT type
 368   1      	if(CountofClus < 65525)
 369   1      	{
 370   2      		//FAT16
 371   2      		Drive_values.FATtype = FAT16;
 372   2      		error_flag = FAT_Unsupported;
 373   2      	}
 374   1      	else
 375   1      	{
 376   2      		//FAT32
 377   2      		Drive_values.FATtype = FAT32;
 378   2      	}
 379   1      	//printf("FATtype Detected: %x\r\n", Drive_values.FATtype);
 380   1      	return error_flag;
 381   1      }
 382          
 383          uint32_t First_Sector (uint32_t Cluster_num)
 384          {
 385   1          uint32_t FirstSecCluster;
 386   1          if(Cluster_num==0)
 387   1          {
 388   2              FirstSecCluster = Drive_values.FirstRootDirSec;
 389   2          }
 390   1          else
 391   1          {
 392   2              FirstSecCluster = ((Cluster_num-2)*Drive_values.SecPerClus)+Drive_values.FirstDataSec;
 393   2          }
 394   1          return FirstSecCluster;
 395   1      }
 396          
 397          uint32_t Find_Next_Clus(uint32_t Cluster_num, uint8_t xdata * array_name)
 398          {
 399   1          uint32_t return_clus;
 400   1      	uint16_t FAToffset;
 401   1      	uint32_t sector = ((Cluster_num*4)/Drive_values.BytesPerSec)+Drive_values.StartofFAT;
 402   1      	Read_Sector(sector,Drive_values.BytesPerSec,array_name);
 403   1      	FAToffset = (uint16_t) ((4*Cluster_num)%Drive_values.BytesPerSec);
 404   1      	return_clus = (read32(FAToffset,array_name)&0x0FFFFFFF);
 405   1      	
 406   1          return return_clus;
 407   1      }
 408          
 409          uint8_t Open_File(uint32_t Cluster, uint8_t xdata * array_in)
 410          {
 411   1      	uint8_t error_flag = no_errors;
 412   1      	uint32_t sector_num;
 413   1      	uint32_t first_sec_num;
 414   1      
 415   1      	do
 416   1      	{
 417   2      		first_sec_num = First_Sector(Cluster);
 418   2      		sector_num = first_sec_num;
 419   2      		while(sector_num!=Drive_values.SecPerClus+first_sec_num)
 420   2      		{
 421   3      			error_flag = Read_Sector(sector_num,Drive_values.BytesPerSec, array_in);
 422   3      			sector_num++;
 423   3      		}
 424   2      		Cluster = Find_Next_Clus(Cluster,array_in);
 425   2      	}while(Cluster!=0x0FFFFFFF);
 426   1      	return error_flag;
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             12/08/2019 19:04:40 PAGE 8   

 427   1      }
 428          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2590    ----
   CONSTANT SIZE    =    187    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     142
   IDATA SIZE       =     22    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
